





//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets621AA2C477D9EBC1F3E9E0178A0ABB22AF417EC3DAE54F5B05E596ED43C01E36))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets621AA2C477D9EBC1F3E9E0178A0ABB22AF417EC3DAE54F5B05E596ED43C01E36 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets621AA2C477D9EBC1F3E9E0178A0ABB22AF417EC3DAE54F5B05E596ED43C01E36()
        {
            this.EdmEntityContainerName = "OrderITEntities";
            this.StoreEntityContainerName = "OrderITModelStoreContainer";
            this.HashOverMappingClosure = "5e57503cccd90ce016f8720a1ab24579c1c1f593de9cd25049b783ab2bb7004d";
            this.HashOverAllExtentViews = "18dec7fafb67e4ffd4f0da82157d84748acdf234550d710cd70eb4ee13fe85ef";
            this.ViewCount = 14;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3282);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [OrderITModel.Store.Company]");
            viewString.Append("(T2.Company_CompanyId, T2.Company_Name, T2.Company_BillingAddress, T2.Company_Bi");
            viewString.Append("llingCity, T2.Company_BillingZipCode, T2.Company_BillingCountry, T2.Company_Ship");
            viewString.Append("pingAddress, T2.Company_ShippingCity, T2.Company_ShippingZipCode, T2.Company_Shi");
            viewString.Append("ppingCountry, T2.Company_WSUserName, T2.Company_WSPassword, T2.Company_WSEnabled");
            viewString.Append(", T2.Company_Type, T2.Company_IBAN, T2.Company_PaymentDays, T2.Company_Version)\r");
            viewString.Append("\n    FROM (\r\n        SELECT -- Constructing Type\r\n            CASE\r\n            ");
            viewString.Append("    WHEN T1._from1 THEN \'S\'\r\n                ELSE \'C\'\r\n            END AS Compan");
            viewString.Append("y_Type, \r\n            T1.Company_CompanyId, T1.Company_Name, T1.Company_BillingA");
            viewString.Append("ddress, T1.Company_BillingCity, T1.Company_BillingZipCode, T1.Company_BillingCou");
            viewString.Append("ntry, T1.Company_ShippingAddress, T1.Company_ShippingCity, T1.Company_ShippingZi");
            viewString.Append("pCode, T1.Company_ShippingCountry, T1.Company_WSUserName, T1.Company_WSPassword,");
            viewString.Append(" T1.Company_WSEnabled, T1.Company_IBAN, T1.Company_PaymentDays, T1.Company_Versi");
            viewString.Append("on\r\n        FROM (\r\n            SELECT \r\n                T.CompanyId AS Company_");
            viewString.Append("CompanyId, \r\n                T.Name AS Company_Name, \r\n                TREAT(T A");
            viewString.Append("S [OrderITModel.Customer]).BillingAddress.Address AS Company_BillingAddress, \r\n ");
            viewString.Append("               TREAT(T AS [OrderITModel.Customer]).BillingAddress.City AS Compan");
            viewString.Append("y_BillingCity, \r\n                TREAT(T AS [OrderITModel.Customer]).BillingAddr");
            viewString.Append("ess.ZipCode AS Company_BillingZipCode, \r\n                TREAT(T AS [OrderITMode");
            viewString.Append("l.Customer]).BillingAddress.Country AS Company_BillingCountry, \r\n               ");
            viewString.Append(" TREAT(T AS [OrderITModel.Customer]).ShippingAddress.Address AS Company_Shipping");
            viewString.Append("Address, \r\n                TREAT(T AS [OrderITModel.Customer]).ShippingAddress.C");
            viewString.Append("ity AS Company_ShippingCity, \r\n                TREAT(T AS [OrderITModel.Customer");
            viewString.Append("]).ShippingAddress.ZipCode AS Company_ShippingZipCode, \r\n                TREAT(T");
            viewString.Append(" AS [OrderITModel.Customer]).ShippingAddress.Country AS Company_ShippingCountry,");
            viewString.Append(" \r\n                TREAT(T AS [OrderITModel.Customer]).WSUserName AS Company_WSU");
            viewString.Append("serName, \r\n                TREAT(T AS [OrderITModel.Customer]).WSPassword AS Com");
            viewString.Append("pany_WSPassword, \r\n                TREAT(T AS [OrderITModel.Customer]).WSEnabled");
            viewString.Append(" AS Company_WSEnabled, \r\n                TREAT(T AS [OrderITModel.Supplier]).IBA");
            viewString.Append("N AS Company_IBAN, \r\n                TREAT(T AS [OrderITModel.Supplier]).Payment");
            viewString.Append("Days AS Company_PaymentDays, \r\n                T.Version AS Company_Version, \r\n ");
            viewString.Append("               CASE WHEN (T IS OF (ONLY [OrderITModel.Customer]) AND TREAT(T AS ");
            viewString.Append("[OrderITModel.Customer]).BillingAddress IS OF (ONLY [OrderITModel.AddressInfo]) ");
            viewString.Append("AND TREAT(T AS [OrderITModel.Customer]).ShippingAddress IS OF (ONLY [OrderITMode");
            viewString.Append("l.AddressInfo])) THEN True ELSE False END AS _from0, \r\n                CASE WHEN");
            viewString.Append(" T IS OF (ONLY [OrderITModel.Supplier]) THEN True ELSE False END AS _from1, \r\n  ");
            viewString.Append("              True AS _from2\r\n            FROM OrderITEntities.Companies AS T\r\n ");
            viewString.Append("           WHERE (T IS OF (ONLY [OrderITModel.Supplier]) OR (T IS OF (ONLY [Orde");
            viewString.Append("rITModel.Customer]) AND TREAT(T AS [OrderITModel.Customer]).BillingAddress IS OF");
            viewString.Append(" (ONLY [OrderITModel.AddressInfo]) AND TREAT(T AS [OrderITModel.Customer]).Shipp");
            viewString.Append("ingAddress IS OF (ONLY [OrderITModel.AddressInfo])))\r\n        ) AS T1\r\n    ) AS ");
            viewString.Append("T2");
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.Order
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.Order", @"
    SELECT VALUE -- Constructing Order
        [OrderITModel.Store.Order](T1.Order_OrderId, T1.Order_OrderDate, T1.Order_CustomerId, T1.Order_ShippingAddress, T1.Order_ShippingCity, T1.Order_ShippingZipCode, T1.Order_ShippingCountry, T1.Order_EstimatedShippingDate, T1.Order_ActualShippingDate, T1.Order_Version)
    FROM (
        SELECT 
            T.OrderId AS Order_OrderId, 
            T.OrderDate AS Order_OrderDate, 
            T.CustomerId AS Order_CustomerId, 
            T.ShippingAddress.Address AS Order_ShippingAddress, 
            T.ShippingAddress.City AS Order_ShippingCity, 
            T.ShippingAddress.ZipCode AS Order_ShippingZipCode, 
            T.ShippingAddress.Country AS Order_ShippingCountry, 
            T.EstimatedShippingDate AS Order_EstimatedShippingDate, 
            T.ActualShippingDate AS Order_ActualShippingDate, 
            T.Version AS Order_Version, 
            True AS _from0
        FROM OrderITEntities.Orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.OrderDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.OrderDetail", @"
    SELECT VALUE -- Constructing OrderDetail
        [OrderITModel.Store.OrderDetail](T1.OrderDetail_OrderDetailId, T1.OrderDetail_OrderId, T1.OrderDetail_ProductId, T1.OrderDetail_Quantity, T1.OrderDetail_UnitPrice, T1.OrderDetail_Discount)
    FROM (
        SELECT 
            T.OrderDetailId AS OrderDetail_OrderDetailId, 
            T.OrderId AS OrderDetail_OrderId, 
            T.ProductId AS OrderDetail_ProductId, 
            T.Quantity AS OrderDetail_Quantity, 
            T.UnitPrice AS OrderDetail_UnitPrice, 
            T.Discount AS OrderDetail_Discount, 
            True AS _from0
        FROM OrderITEntities.OrderDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.Shirt
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.Shirt", @"
    SELECT VALUE -- Constructing Shirt
        [OrderITModel.Store.Shirt](T1.Shirt_ProductId, T1.Shirt_SleeveType, T1.Shirt_Color, T1.Shirt_Size, T1.Shirt_Gender, T1.Shirt_Material)
    FROM (
        SELECT 
            T.ProductId AS Shirt_ProductId, 
            TREAT(T AS [OrderITModel.Shirt]).SleeveType AS Shirt_SleeveType, 
            TREAT(T AS [OrderITModel.Shirt]).Color AS Shirt_Color, 
            TREAT(T AS [OrderITModel.Shirt]).Size AS Shirt_Size, 
            TREAT(T AS [OrderITModel.Shirt]).Gender AS Shirt_Gender, 
            TREAT(T AS [OrderITModel.Shirt]).Material AS Shirt_Material, 
            True AS _from0
        FROM OrderITEntities.Products AS T
        WHERE T IS OF (ONLY [OrderITModel.Shirt])
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.Product
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.Product", @"
    SELECT VALUE -- Constructing Product
        [OrderITModel.Store.Product](T1.Product_ProductId, T1.Product_Name, T1.Product_Description, T1.Product_Brand, T1.Product_Price, T1.Product_AvailableItems, T1.Product_ReorderLevel, T1.Product_Version)
    FROM (
        SELECT 
            T.ProductId AS Product_ProductId, 
            T.Name AS Product_Name, 
            T.Description AS Product_Description, 
            T.Brand AS Product_Brand, 
            T.Price AS Product_Price, 
            T.AvailableItems AS Product_AvailableItems, 
            T.ReorderLevel AS Product_ReorderLevel, 
            T.Version AS Product_Version, 
            True AS _from0
        FROM OrderITEntities.Products AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.Shoe
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.Shoe", @"
    SELECT VALUE -- Constructing Shoe
        [OrderITModel.Store.Shoe](T1.Shoe_ProductId, T1.Shoe_Color, T1.Shoe_Size, T1.Shoe_Gender, T1.Shoe_Sport)
    FROM (
        SELECT 
            T.ProductId AS Shoe_ProductId, 
            TREAT(T AS [OrderITModel.Shoe]).Color AS Shoe_Color, 
            TREAT(T AS [OrderITModel.Shoe]).Size AS Shoe_Size, 
            TREAT(T AS [OrderITModel.Shoe]).Gender AS Shoe_Gender, 
            TREAT(T AS [OrderITModel.Shoe]).Sport AS Shoe_Sport, 
            True AS _from0
        FROM OrderITEntities.Products AS T
        WHERE T IS OF (ONLY [OrderITModel.Shoe])
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.ProductSupplier
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.ProductSupplier", @"
    SELECT VALUE -- Constructing ProductSupplier
        [OrderITModel.Store.ProductSupplier](T1.ProductSupplier_ProductId, T1.ProductSupplier_SupplierId)
    FROM (
        SELECT 
            Key(T.Product).ProductId AS ProductSupplier_ProductId, 
            Key(T.Supplier).CompanyId AS ProductSupplier_SupplierId, 
            True AS _from0
        FROM OrderITEntities.SupplierProduct AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITEntities.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3151);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        CASE\r\n            WHEN T3.");
            viewString.Append("_from2 THEN [OrderITModel.Supplier](T3.Company_CompanyId, T3.Company_Name, T3.Co");
            viewString.Append("mpany_Version, T3.Supplier_IBAN, T3.Supplier_PaymentDays)\r\n            ELSE [Ord");
            viewString.Append("erITModel.Customer](T3.Company_CompanyId, T3.Company_Name, T3.Company_Version, T");
            viewString.Append("3.Customer_WSUserName, T3.Customer_WSPassword, T3.Customer_WSEnabled, T3.Custome");
            viewString.Append("r_BillingAddress, T3.Customer_ShippingAddress)\r\n        END\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT -- Constructing BillingAddress\r\n            CASE\r\n                WHEN T");
            viewString.Append("2._from0 THEN [OrderITModel.AddressInfo](T2.Customer_BillingAddress_Address, T2.");
            viewString.Append("Customer_BillingAddress_City, T2.Customer_BillingAddress_ZipCode, T2.Customer_Bi");
            viewString.Append("llingAddress_Country)\r\n            END AS Customer_BillingAddress, \r\n           ");
            viewString.Append(" T2.Company_CompanyId, T2.Company_Name, T2.Company_Version, T2.Supplier_IBAN, T2");
            viewString.Append(".Supplier_PaymentDays, T2.Customer_WSUserName, T2.Customer_WSPassword, T2.Custom");
            viewString.Append("er_WSEnabled, T2.Customer_ShippingAddress, T2._from2\r\n        FROM (\r\n          ");
            viewString.Append("  SELECT -- Constructing ShippingAddress\r\n                CASE\r\n                ");
            viewString.Append("    WHEN T1._from0 THEN [OrderITModel.AddressInfo](T1.Customer_ShippingAddress_A");
            viewString.Append("ddress, T1.Customer_ShippingAddress_City, T1.Customer_ShippingAddress_ZipCode, T");
            viewString.Append("1.Customer_ShippingAddress_Country)\r\n                END AS Customer_ShippingAdd");
            viewString.Append("ress, \r\n                T1.Company_CompanyId, T1.Company_Name, T1.Company_Versio");
            viewString.Append("n, T1.Supplier_IBAN, T1.Supplier_PaymentDays, T1.Customer_WSUserName, T1.Custome");
            viewString.Append("r_WSPassword, T1.Customer_WSEnabled, T1.Customer_BillingAddress_Address, T1.Cust");
            viewString.Append("omer_BillingAddress_City, T1.Customer_BillingAddress_ZipCode, T1.Customer_Billin");
            viewString.Append("gAddress_Country, T1._from0, T1._from2\r\n            FROM (\r\n                SELE");
            viewString.Append("CT \r\n                    T.CompanyId AS Company_CompanyId, \r\n                   ");
            viewString.Append(" T.Name AS Company_Name, \r\n                    T.Version AS Company_Version, \r\n ");
            viewString.Append("                   T.IBAN AS Supplier_IBAN, \r\n                    T.PaymentDays ");
            viewString.Append("AS Supplier_PaymentDays, \r\n                    T.WSUserName AS Customer_WSUserNa");
            viewString.Append("me, \r\n                    T.WSPassword AS Customer_WSPassword, \r\n               ");
            viewString.Append("     T.WSEnabled AS Customer_WSEnabled, \r\n                    T.BillingAddress A");
            viewString.Append("S Customer_BillingAddress_Address, \r\n                    T.BillingCity AS Custom");
            viewString.Append("er_BillingAddress_City, \r\n                    T.BillingZipCode AS Customer_Billi");
            viewString.Append("ngAddress_ZipCode, \r\n                    T.BillingCountry AS Customer_BillingAdd");
            viewString.Append("ress_Country, \r\n                    T.ShippingAddress AS Customer_ShippingAddres");
            viewString.Append("s_Address, \r\n                    T.ShippingCity AS Customer_ShippingAddress_City");
            viewString.Append(", \r\n                    T.ShippingZipCode AS Customer_ShippingAddress_ZipCode, \r");
            viewString.Append("\n                    T.ShippingCountry AS Customer_ShippingAddress_Country, \r\n  ");
            viewString.Append("                  CASE WHEN T.Type = \'C\' THEN True ELSE False END AS _from0, \r\n ");
            viewString.Append("                   True AS _from1, \r\n                    CASE WHEN T.Type = \'S\' ");
            viewString.Append("THEN True ELSE False END AS _from2\r\n                FROM OrderITModelStoreContai");
            viewString.Append("ner.Company AS T\r\n                WHERE T.Type IN {\'S\', \'C\'}\r\n            ) AS T");
            viewString.Append("1\r\n        ) AS T2\r\n    ) AS T3");
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for OrderITEntities.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.Orders", @"
    SELECT VALUE -- Constructing Orders
        [OrderITModel.Order](T2.Order_OrderId, T2.Order_OrderDate, T2.Order_EstimatedShippingDate, T2.Order_ActualShippingDate, T2.Order_ShippingAddress, T2.Order_CustomerId, T2.Order_Version)
    FROM (
        SELECT -- Constructing ShippingAddress
            [OrderITModel.AddressInfo](T1.Order_ShippingAddress_Address, T1.Order_ShippingAddress_City, T1.Order_ShippingAddress_ZipCode, T1.Order_ShippingAddress_Country) AS Order_ShippingAddress, 
            T1.Order_OrderId, T1.Order_OrderDate, T1.Order_EstimatedShippingDate, T1.Order_ActualShippingDate, T1.Order_CustomerId, T1.Order_Version
        FROM (
            SELECT 
                T.OrderId AS Order_OrderId, 
                T.OrderDate AS Order_OrderDate, 
                T.EstimatedShippingDate AS Order_EstimatedShippingDate, 
                T.ActualShippingDate AS Order_ActualShippingDate, 
                T.CustomerId AS Order_CustomerId, 
                T.Version AS Order_Version, 
                T.ShippingAddress AS Order_ShippingAddress_Address, 
                T.ShippingCity AS Order_ShippingAddress_City, 
                T.ShippingZipCode AS Order_ShippingAddress_ZipCode, 
                T.ShippingCountry AS Order_ShippingAddress_Country, 
                True AS _from0
            FROM OrderITModelStoreContainer.[Order] AS T
        ) AS T1
    ) AS T2");
        }
        
        /// <Summary>
        /// return view for OrderITEntities.OrderDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.OrderDetails", @"
    SELECT VALUE -- Constructing OrderDetails
        [OrderITModel.OrderDetail](T1.OrderDetail_OrderDetailId, T1.OrderDetail_Quantity, T1.OrderDetail_UnitPrice, T1.OrderDetail_Discount, T1.OrderDetail_ProductId, T1.OrderDetail_OrderId)
    FROM (
        SELECT 
            T.OrderDetailId AS OrderDetail_OrderDetailId, 
            T.Quantity AS OrderDetail_Quantity, 
            T.UnitPrice AS OrderDetail_UnitPrice, 
            T.Discount AS OrderDetail_Discount, 
            T.ProductId AS OrderDetail_ProductId, 
            T.OrderId AS OrderDetail_OrderId, 
            True AS _from0
        FROM OrderITModelStoreContainer.OrderDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITEntities.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3490);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Products\r\n        CASE\r\n            WHEN (NOT");
            viewString.Append("(T5._from1) AND NOT(T5._from2)) THEN [OrderITModel.Product](T5.Product_ProductId");
            viewString.Append(", T5.Product_Name, T5.Product_Description, T5.Product_Brand, T5.Product_Price, T");
            viewString.Append("5.Product_AvailableItems, T5.Product_ReorderLevel, T5.Product_Version)\r\n        ");
            viewString.Append("    WHEN T5._from1 THEN [OrderITModel.Shirt](T5.Product_ProductId, T5.Product_Na");
            viewString.Append("me, T5.Product_Description, T5.Product_Brand, T5.Product_Price, T5.Product_Avail");
            viewString.Append("ableItems, T5.Product_ReorderLevel, T5.Product_Version, T5.Shirt_SleeveType, T5.");
            viewString.Append("Shirt_Color, T5.Shirt_Size, T5.Shirt_Gender, T5.Shirt_Material)\r\n            ELS");
            viewString.Append("E [OrderITModel.Shoe](T5.Product_ProductId, T5.Product_Name, T5.Product_Descript");
            viewString.Append("ion, T5.Product_Brand, T5.Product_Price, T5.Product_AvailableItems, T5.Product_R");
            viewString.Append("eorderLevel, T5.Product_Version, T5.Shoe_Color, T5.Shoe_Size, T5.Shoe_Gender, T5");
            viewString.Append(".Shoe_Sport)\r\n        END\r\n    FROM (\r\n        SELECT T1.Product_ProductId, T1.P");
            viewString.Append("roduct_Name, T1.Product_Description, T1.Product_Brand, T1.Product_Price, T1.Prod");
            viewString.Append("uct_AvailableItems, T1.Product_ReorderLevel, T1.Product_Version, T4.Shirt_Sleeve");
            viewString.Append("Type, T4.Shirt_Color, T4.Shirt_Size, T4.Shirt_Gender, T4.Shirt_Material, T4.Shoe");
            viewString.Append("_Color, T4.Shoe_Size, T4.Shoe_Gender, T4.Shoe_Sport, T1._from0, (T4._from1 AND T");
            viewString.Append("4._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2");
            viewString.Append("\r\n        FROM  (\r\n            SELECT \r\n                T.ProductId AS Product_P");
            viewString.Append("roductId, \r\n                T.Name AS Product_Name, \r\n                T.Descript");
            viewString.Append("ion AS Product_Description, \r\n                T.Brand AS Product_Brand, \r\n      ");
            viewString.Append("          T.Price AS Product_Price, \r\n                T.AvailableItems AS Produc");
            viewString.Append("t_AvailableItems, \r\n                T.ReorderLevel AS Product_ReorderLevel, \r\n  ");
            viewString.Append("              T.Version AS Product_Version, \r\n                True AS _from0\r\n  ");
            viewString.Append("          FROM OrderITModelStoreContainer.Product AS T) AS T1\r\n            LEFT ");
            viewString.Append("OUTER JOIN ( (\r\n                SELECT \r\n                    T.ProductId AS Prod");
            viewString.Append("uct_ProductId, \r\n                    T.SleeveType AS Shirt_SleeveType, \r\n       ");
            viewString.Append("             T.Color AS Shirt_Color, \r\n                    T.Size AS Shirt_Size,");
            viewString.Append(" \r\n                    T.Gender AS Shirt_Gender, \r\n                    T.Materia");
            viewString.Append("l AS Shirt_Material, \r\n                    CAST(NULL AS [Edm.String]) AS Shoe_Co");
            viewString.Append("lor, \r\n                    CAST(NULL AS [Edm.String]) AS Shoe_Size, \r\n          ");
            viewString.Append("          CAST(NULL AS [Edm.String]) AS Shoe_Gender, \r\n                    CAST(");
            viewString.Append("NULL AS [Edm.String]) AS Shoe_Sport, \r\n                    True AS _from1, \r\n   ");
            viewString.Append("                 False AS _from2\r\n                FROM OrderITModelStoreContaine");
            viewString.Append("r.Shirt AS T)\r\n                UNION ALL (\r\n                SELECT \r\n           ");
            viewString.Append("         T.ProductId AS Product_ProductId, \r\n                    CAST(NULL AS [E");
            viewString.Append("dm.Int32]) AS Shirt_SleeveType, \r\n                    CAST(NULL AS [Edm.String])");
            viewString.Append(" AS Shirt_Color, \r\n                    CAST(NULL AS [Edm.String]) AS Shirt_Size,");
            viewString.Append(" \r\n                    CAST(NULL AS [Edm.String]) AS Shirt_Gender, \r\n           ");
            viewString.Append("         CAST(NULL AS [Edm.String]) AS Shirt_Material, \r\n                    T.C");
            viewString.Append("olor AS Shoe_Color, \r\n                    T.Size AS Shoe_Size, \r\n               ");
            viewString.Append("     T.Gender AS Shoe_Gender, \r\n                    T.Sport AS Shoe_Sport, \r\n   ");
            viewString.Append("                 False AS _from1, \r\n                    True AS _from2\r\n        ");
            viewString.Append("        FROM OrderITModelStoreContainer.Shoe AS T)) AS T4\r\n            ON T1.Pro");
            viewString.Append("duct_ProductId = T4.Product_ProductId\r\n    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.Products", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for OrderITEntities.SupplierProduct
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.SupplierProduct", @"
    SELECT VALUE -- Constructing SupplierProduct
        [OrderITModel.SupplierProduct](T3.SupplierProduct_Supplier, T3.SupplierProduct_Product)
    FROM (
        SELECT -- Constructing Supplier
            CreateRef(OrderITEntities.Companies, row(T2.SupplierProduct_Supplier_CompanyId),[OrderITModel.Supplier]) AS SupplierProduct_Supplier, 
            T2.SupplierProduct_Product
        FROM (
            SELECT -- Constructing Product
                CreateRef(OrderITEntities.Products, row(T1.SupplierProduct_Product_ProductId),[OrderITModel.Product]) AS SupplierProduct_Product, 
                T1.SupplierProduct_Supplier_CompanyId
            FROM (
                SELECT 
                    T.SupplierId AS SupplierProduct_Supplier_CompanyId, 
                    T.ProductId AS SupplierProduct_Product_ProductId, 
                    True AS _from0
                FROM OrderITModelStoreContainer.ProductSupplier AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for OrderITModelStoreContainer.GeometrySample
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITModelStoreContainer.GeometrySample", @"
    SELECT VALUE -- Constructing GeometrySample
        [OrderITModel.Store.GeometrySample](T1.GeometrySample_Id, T1.GeometrySample_SpatialData)
    FROM (
        SELECT 
            T.Id AS GeometrySample_Id, 
            T.SpatialData AS GeometrySample_SpatialData, 
            True AS _from0
        FROM OrderITEntities.GeometrySamples AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for OrderITEntities.GeometrySamples
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrderITEntities.GeometrySamples", @"
    SELECT VALUE -- Constructing GeometrySamples
        [OrderITModel.GeometrySample](T1.GeometrySample_Id, T1.GeometrySample_SpatialData)
    FROM (
        SELECT 
            T.Id AS GeometrySample_Id, 
            T.SpatialData AS GeometrySample_SpatialData, 
            True AS _from0
        FROM OrderITModelStoreContainer.GeometrySample AS T
    ) AS T1");
        }
    }
}


