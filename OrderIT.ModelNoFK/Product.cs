//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;


namespace OrderIT.ModelIA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Shirt))]
    [KnownType(typeof(Shoe))]
    [KnownType(typeof(Supplier))]
    [KnownType(typeof(OrderDetail))]
    public partial class Product  : INotifyPropertyChanged, IEditableObject
    {
        #region INotifyPropertyChanged
    		public event PropertyChangedEventHandler PropertyChanged;
    
    		protected void NotifyPropertyChanged(String info) {
    			if (PropertyChanged != null) {
    				PropertyChanged(this, new PropertyChangedEventArgs(info));
    			}
    		}

        #endregion
        #region Primitive Properties
    	
        [DataMember]
        public virtual int ProductId
        {
            get { return _productId; }
            set { _productId = value; NotifyPropertyChanged("ProductId"); }
        }
        private int _productId;
        protected int ProductIdEdit { get; set; }
    	
        [DataMember]
        public virtual string Name
        {
            get { return _name; }
            set { _name = value; NotifyPropertyChanged("Name"); }
        }
        private string _name;
        protected string NameEdit { get; set; }
    	
        [DataMember]
        public virtual string Description
        {
            get { return _description; }
            set { _description = value; NotifyPropertyChanged("Description"); }
        }
        private string _description;
        protected string DescriptionEdit { get; set; }
    	
        [DataMember]
        public virtual string Brand
        {
            get { return _brand; }
            set { _brand = value; NotifyPropertyChanged("Brand"); }
        }
        private string _brand;
        protected string BrandEdit { get; set; }
    	
        [DataMember]
        public virtual decimal Price
        {
            get { return _price; }
            set { _price = value; NotifyPropertyChanged("Price"); }
        }
        private decimal _price;
        protected decimal PriceEdit { get; set; }
    	
        [DataMember]
        public virtual int AvailableItems
        {
            get { return _availableItems; }
            set { _availableItems = value; NotifyPropertyChanged("AvailableItems"); }
        }
        private int _availableItems;
        protected int AvailableItemsEdit { get; set; }
    	
        [DataMember]
        public virtual int ReorderLevel
        {
            get { return _reorderLevel; }
            set { _reorderLevel = value; NotifyPropertyChanged("ReorderLevel"); }
        }
        private int _reorderLevel;
        protected int ReorderLevelEdit { get; set; }

        #endregion
        #region Navigation Properties
    
    	
        [DataMember]
        public virtual ICollection<Supplier> Suppliers
        {
            get
            {
                if (_suppliers == null)
                {
                    var newCollection = new FixupCollection<Supplier>();
                    newCollection.CollectionChanged += FixupSuppliers;
                    _suppliers = newCollection;
                }
                return _suppliers;
            }
            set
            {
                if (!ReferenceEquals(_suppliers, value))
                {
                    var previousValue = _suppliers as FixupCollection<Supplier>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSuppliers;
                    }
                    _suppliers = value;
                    var newValue = value as FixupCollection<Supplier>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSuppliers;
                    }
                    NotifyPropertyChanged("Suppliers");
                }
            }
        }
        private ICollection<Supplier> _suppliers;
    
    	
        [DataMember]
        public virtual ICollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    var newCollection = new FixupCollection<OrderDetail>();
                    newCollection.CollectionChanged += FixupOrderDetails;
                    _orderDetails = newCollection;
                }
                return _orderDetails;
            }
            set
            {
                if (!ReferenceEquals(_orderDetails, value))
                {
                    var previousValue = _orderDetails as FixupCollection<OrderDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrderDetails;
                    }
                    _orderDetails = value;
                    var newValue = value as FixupCollection<OrderDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrderDetails;
                    }
                    NotifyPropertyChanged("OrderDetails");
                }
            }
        }
        private ICollection<OrderDetail> _orderDetails;

        #endregion
        #region Association Fixup
    
        private void FixupSuppliers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Supplier item in e.NewItems)
                {
                    if (!item.Products.Contains(this))
                    {
                        item.Products.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Supplier item in e.OldItems)
                {
                    if (item.Products.Contains(this))
                    {
                        item.Products.Remove(this);
                    }
                }
            }
        }
    
        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }

        #endregion
        #region IEditableObject
    
        void IEditableObject.BeginEdit(){
    	    BeginEditProtected();
        }
    
        void IEditableObject.EndEdit(){
    	    EndEditProtected();
    	}
    
        void IEditableObject.CancelEdit(){
    	    CancelEditProtected();
        }
    	
        private bool isEditing = false;
    
    	protected virtual void BeginEditProtected(){
            if (!isEditing) 
            {
        		ProductIdEdit = ProductId;
        		NameEdit = Name;
        		DescriptionEdit = Description;
        		BrandEdit = Brand;
        		PriceEdit = Price;
        		AvailableItemsEdit = AvailableItems;
        		ReorderLevelEdit = ReorderLevel;
                isEditing = true;
            }
    	}
    
        protected virtual void CancelEditProtected(){
            ProductId = ProductIdEdit;
            Name = NameEdit;
            Description = DescriptionEdit;
            Brand = BrandEdit;
            Price = PriceEdit;
            AvailableItems = AvailableItemsEdit;
            ReorderLevel = ReorderLevelEdit;
            isEditing = false;
        }
    
    	protected virtual void EndEditProtected(){
    	    isEditing = false;
        }
            

        #endregion
        #region Equality Operators
        public override bool Equals (object obj)
        {
            if (!(obj is Product))
                return false;
                    
            Product o = (Product)obj;
            return (1==1
              && this.ProductId == o.ProductId 
            );
        }
    
        public override int GetHashCode()
        {
            return (1
              ^ this.ProductId.GetHashCode()
            );
        }

        #endregion
    }
}
