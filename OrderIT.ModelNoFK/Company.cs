//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;


namespace OrderIT.ModelIA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Supplier))]
    [KnownType(typeof(Customer))]
    public abstract partial class Company  : INotifyPropertyChanged, IEditableObject
    {
        #region INotifyPropertyChanged
    		public event PropertyChangedEventHandler PropertyChanged;
    
    		protected void NotifyPropertyChanged(String info) {
    			if (PropertyChanged != null) {
    				PropertyChanged(this, new PropertyChangedEventArgs(info));
    			}
    		}

        #endregion
        #region Primitive Properties
    	
        [DataMember]
        public virtual int CompanyId
        {
            get { return _companyId; }
            set { _companyId = value; NotifyPropertyChanged("CompanyId"); }
        }
        private int _companyId;
        protected int CompanyIdEdit { get; set; }
    	
        [DataMember]
        public virtual string Name
        {
            get { return _name; }
            set { _name = value; NotifyPropertyChanged("Name"); }
        }
        private string _name;
        protected string NameEdit { get; set; }

        #endregion
        #region IEditableObject
    
        void IEditableObject.BeginEdit(){
    	    BeginEditProtected();
        }
    
        void IEditableObject.EndEdit(){
    	    EndEditProtected();
    	}
    
        void IEditableObject.CancelEdit(){
    	    CancelEditProtected();
        }
    	
        private bool isEditing = false;
    
    	protected virtual void BeginEditProtected(){
            if (!isEditing) 
            {
        		CompanyIdEdit = CompanyId;
        		NameEdit = Name;
                isEditing = true;
            }
    	}
    
        protected virtual void CancelEditProtected(){
            CompanyId = CompanyIdEdit;
            Name = NameEdit;
            isEditing = false;
        }
    
    	protected virtual void EndEditProtected(){
    	    isEditing = false;
        }
            

        #endregion
        #region Equality Operators
        public override bool Equals (object obj)
        {
            if (!(obj is Company))
                return false;
                    
            Company o = (Company)obj;
            return (1==1
              && this.CompanyId == o.CompanyId 
            );
        }
    
        public override int GetHashCode()
        {
            return (1
              ^ this.CompanyId.GetHashCode()
            );
        }

        #endregion
    }
}
