//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;


namespace OrderIT.ModelIA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Product))]
    public partial class Supplier : Company 
    {
        #region Primitive Properties
    	
        [DataMember]
        public virtual string IBAN
        {
            get { return _iBAN; }
            set { _iBAN = value; NotifyPropertyChanged("IBAN"); }
        }
        private string _iBAN;
        protected string IBANEdit { get; set; }
    	
        [DataMember]
        public virtual Nullable<short> PaymentDays
        {
            get { return _paymentDays; }
            set { _paymentDays = value; NotifyPropertyChanged("PaymentDays"); }
        }
        private Nullable<short> _paymentDays;
        protected Nullable<short> PaymentDaysEdit { get; set; }

        #endregion
        #region Navigation Properties
    
    	
        [DataMember]
        public virtual ICollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                    NotifyPropertyChanged("Products");
                }
            }
        }
        private ICollection<Product> _products;

        #endregion
        #region Association Fixup
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    if (!item.Suppliers.Contains(this))
                    {
                        item.Suppliers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (item.Suppliers.Contains(this))
                    {
                        item.Suppliers.Remove(this);
                    }
                }
            }
        }

        #endregion
        #region IEditableObject
        private bool isEditing = false;
    
    	protected override void BeginEditProtected(){
            if (!isEditing) 
            {
        		IBANEdit = IBAN;
        		PaymentDaysEdit = PaymentDays;
                isEditing = true;
            }
    	}
    
        protected virtual void CancelEditProtected(){
            IBAN = IBANEdit;
            PaymentDays = PaymentDaysEdit;
            isEditing = false;
        }
    
    	protected virtual void EndEditProtected(){
    	    isEditing = false;
        }
            

        #endregion
        #region Equality Operators
        public override bool Equals (object obj)
        {
            if (!(obj is Supplier))
                return false;
                    
            Supplier o = (Supplier)obj;
            return (1==1
              && this.CompanyId == o.CompanyId 
            );
        }
    
        public override int GetHashCode()
        {
            return (1
              ^ this.CompanyId.GetHashCode()
            );
        }

        #endregion
    }
}
