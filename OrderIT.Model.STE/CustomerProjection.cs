//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace OrderIT.Model.STE
{
    
    public partial class CustomerProjection : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnComplexPropertyChanging();
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string BillingAddress
        {
            get { return _billingAddress; }
            set
            {
                if (_billingAddress != value)
                {
                    OnComplexPropertyChanging();
                    _billingAddress = value;
                    OnPropertyChanged("BillingAddress");
                }
            }
        }
        private string _billingAddress;
    
        [DataMember]
        public string BillingCity
        {
            get { return _billingCity; }
            set
            {
                if (_billingCity != value)
                {
                    OnComplexPropertyChanging();
                    _billingCity = value;
                    OnPropertyChanged("BillingCity");
                }
            }
        }
        private string _billingCity;
    
        [DataMember]
        public string ShippingAddress
        {
            get { return _shippingAddress; }
            set
            {
                if (_shippingAddress != value)
                {
                    OnComplexPropertyChanging();
                    _shippingAddress = value;
                    OnPropertyChanged("ShippingAddress");
                }
            }
        }
        private string _shippingAddress;
    
        [DataMember]
        public string ShippingCity
        {
            get { return _shippingCity; }
            set
            {
                if (_shippingCity != value)
                {
                    OnComplexPropertyChanging();
                    _shippingCity = value;
                    OnPropertyChanged("ShippingCity");
                }
            }
        }
        private string _shippingCity;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, CustomerProjection complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Name", parentPropertyName), complexObject == null ? null : (object)complexObject.Name);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.BillingAddress", parentPropertyName), complexObject == null ? null : (object)complexObject.BillingAddress);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.BillingCity", parentPropertyName), complexObject == null ? null : (object)complexObject.BillingCity);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ShippingAddress", parentPropertyName), complexObject == null ? null : (object)complexObject.ShippingAddress);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ShippingCity", parentPropertyName), complexObject == null ? null : (object)complexObject.ShippingCity);
        }

        #endregion
    }
}
