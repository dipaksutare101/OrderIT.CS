//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace OrderIT.Model.STE
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Shirt))]
    [KnownType(typeof(Shoe))]
    [KnownType(typeof(Supplier))]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private int _productId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Brand
        {
            get { return _brand; }
            set
            {
                if (_brand != value)
                {
                    _brand = value;
                    OnPropertyChanged("Brand");
                }
            }
        }
        private string _brand;
    
        [DataMember]
        public decimal Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private decimal _price;
    
        [DataMember]
        public int AvailableItems
        {
            get { return _availableItems; }
            set
            {
                if (_availableItems != value)
                {
                    _availableItems = value;
                    OnPropertyChanged("AvailableItems");
                }
            }
        }
        private int _availableItems;
    
        [DataMember]
        public int ReorderLevel
        {
            get { return _reorderLevel; }
            set
            {
                if (_reorderLevel != value)
                {
                    _reorderLevel = value;
                    OnPropertyChanged("ReorderLevel");
                }
            }
        }
        private int _reorderLevel;
    
        [DataMember]
        public byte[] Version
        {
            get { return _version; }
            set
            {
                if (_version != value)
                {
                    ChangeTracker.RecordOriginalValue("Version", _version);
                    _version = value;
                    OnPropertyChanged("Version");
                }
            }
        }
        private byte[] _version;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Supplier> Suppliers
        {
            get
            {
                if (_suppliers == null)
                {
                    _suppliers = new TrackableCollection<Supplier>();
                    _suppliers.CollectionChanged += FixupSuppliers;
                }
                return _suppliers;
            }
            set
            {
                if (!ReferenceEquals(_suppliers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_suppliers != null)
                    {
                        _suppliers.CollectionChanged -= FixupSuppliers;
                    }
                    _suppliers = value;
                    if (_suppliers != null)
                    {
                        _suppliers.CollectionChanged += FixupSuppliers;
                    }
                    OnNavigationPropertyChanged("Suppliers");
                }
            }
        }
        private TrackableCollection<Supplier> _suppliers;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Suppliers.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSuppliers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Supplier item in e.NewItems)
                {
                    if (!item.Products.Contains(this))
                    {
                        item.Products.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Suppliers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Supplier item in e.OldItems)
                {
                    if (item.Products.Contains(this))
                    {
                        item.Products.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Suppliers", item);
                    }
                }
            }
        }

        #endregion
    }
}
